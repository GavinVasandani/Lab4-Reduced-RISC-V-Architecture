$version Generated by VerilatedVcd $end
$date Tue Nov 22 19:34:55 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 \ a0 [31:0] $end
  $var wire  1 X clk $end
  $var wire  1 Y rst $end
  $var wire 32 [ trash [31:0] $end
  $var wire  1 Z write_en $end
  $scope module top $end
   $var wire 32 ] ADDRESS_WIDTH [31:0] $end
   $var wire  3 ) ALU_ctrl [2:0] $end
   $var wire  1 ( ALU_src $end
   $var wire 32 ] DATA_WIDTH [31:0] $end
   $var wire  1 * EQ $end
   $var wire 32 + ImmOp [31:0] $end
   $var wire  1 ( ImmSrc $end
   $var wire 32 # PC_instr [31:0] $end
   $var wire  1 $ PC_src $end
   $var wire 32 \ a0 [31:0] $end
   $var wire  1 X clk $end
   $var wire 12 - imm_branch [11:0] $end
   $var wire 12 , imm_imm [11:0] $end
   $var wire  5 & rd [4:0] $end
   $var wire  5 % rs1 [4:0] $end
   $var wire  5 & rs2 [4:0] $end
   $var wire  1 Y rst $end
   $var wire 32 [ trash [31:0] $end
   $var wire 32 ' write_data [31:0] $end
   $var wire  1 Z write_en $end
   $scope module ALU $end
    $var wire 32 0 ALUOp2 [31:0] $end
    $var wire  1 ( ALUSrc $end
    $var wire  3 ) ALU_ctrl [2:0] $end
    $var wire 32 ' ALUout [31:0] $end
    $var wire 32 ^ Address_Width [31:0] $end
    $var wire 32 ] Data_Width [31:0] $end
    $var wire 32 + ImmOp [31:0] $end
    $var wire 32 \ a0 [31:0] $end
    $var wire  1 X clk $end
    $var wire 32 ' din [31:0] $end
    $var wire  1 Z en $end
    $var wire  1 * eq $end
    $var wire  5 & rd [4:0] $end
    $var wire 32 . rd1 [31:0] $end
    $var wire 32 / rd2 [31:0] $end
    $var wire  5 % rs1 [4:0] $end
    $var wire  5 & rs2 [4:0] $end
    $scope module alu1 $end
     $var wire  3 ) ALU_ctrl [2:0] $end
     $var wire 32 ' ALUout [31:0] $end
     $var wire 32 ] Data_Width [31:0] $end
     $var wire  1 * eq $end
     $var wire 32 . op1 [31:0] $end
     $var wire 32 0 op2 [31:0] $end
    $upscope $end
    $scope module mux1 $end
     $var wire 32 0 ALUOp2 [31:0] $end
     $var wire  1 ( ALUSrc $end
     $var wire 32 ] Data_Width [31:0] $end
     $var wire 32 + ImmOp [31:0] $end
     $var wire 32 / regOp2 [31:0] $end
    $upscope $end
    $scope module regFile1 $end
     $var wire 32 ^ Address_Width [31:0] $end
     $var wire 32 ] Data_Width [31:0] $end
     $var wire 32 \ a0 [31:0] $end
     $var wire  1 X clk $end
     $var wire 32 ' din [31:0] $end
     $var wire  1 Z en $end
     $var wire  5 & rd [4:0] $end
     $var wire 32 . rd1 [31:0] $end
     $var wire 32 / rd2 [31:0] $end
     $var wire 32 1 regFile_array[0] [31:0] $end
     $var wire 32 ; regFile_array[10] [31:0] $end
     $var wire 32 < regFile_array[11] [31:0] $end
     $var wire 32 = regFile_array[12] [31:0] $end
     $var wire 32 > regFile_array[13] [31:0] $end
     $var wire 32 ? regFile_array[14] [31:0] $end
     $var wire 32 @ regFile_array[15] [31:0] $end
     $var wire 32 A regFile_array[16] [31:0] $end
     $var wire 32 B regFile_array[17] [31:0] $end
     $var wire 32 C regFile_array[18] [31:0] $end
     $var wire 32 D regFile_array[19] [31:0] $end
     $var wire 32 2 regFile_array[1] [31:0] $end
     $var wire 32 E regFile_array[20] [31:0] $end
     $var wire 32 F regFile_array[21] [31:0] $end
     $var wire 32 G regFile_array[22] [31:0] $end
     $var wire 32 H regFile_array[23] [31:0] $end
     $var wire 32 I regFile_array[24] [31:0] $end
     $var wire 32 J regFile_array[25] [31:0] $end
     $var wire 32 K regFile_array[26] [31:0] $end
     $var wire 32 L regFile_array[27] [31:0] $end
     $var wire 32 M regFile_array[28] [31:0] $end
     $var wire 32 N regFile_array[29] [31:0] $end
     $var wire 32 3 regFile_array[2] [31:0] $end
     $var wire 32 O regFile_array[30] [31:0] $end
     $var wire 32 P regFile_array[31] [31:0] $end
     $var wire 32 4 regFile_array[3] [31:0] $end
     $var wire 32 5 regFile_array[4] [31:0] $end
     $var wire 32 6 regFile_array[5] [31:0] $end
     $var wire 32 7 regFile_array[6] [31:0] $end
     $var wire 32 8 regFile_array[7] [31:0] $end
     $var wire 32 9 regFile_array[8] [31:0] $end
     $var wire 32 : regFile_array[9] [31:0] $end
     $var wire  5 % rs1 [4:0] $end
     $var wire  5 & rs2 [4:0] $end
    $upscope $end
   $upscope $end
   $scope module control_unit $end
    $var wire  3 ) ALUctrl [2:0] $end
    $var wire  1 ( ALUsrc $end
    $var wire  1 * EQ $end
    $var wire  1 ( ImmSrc $end
    $var wire  1 $ PCsrc $end
    $var wire  7 Q instr_opcode [6:0] $end
   $upscope $end
   $scope module myPC $end
    $var wire 32 _ ADDRESS_WIDTH [31:0] $end
    $var wire 32 ] DATA_WIDTH [31:0] $end
    $var wire 32 ] IMMOP_WIDTH [31:0] $end
    $var wire 32 + ImmOp [31:0] $end
    $var wire  8 S ImmOp_intermed [7:0] $end
    $var wire  8 R PC [7:0] $end
    $var wire  1 $ PCsrc $end
    $var wire  1 X clk $end
    $var wire 32 # instr [31:0] $end
    $var wire  1 Y rst $end
    $scope module myPCreg $end
     $var wire 32 _ ADDRESS_WIDTH [31:0] $end
     $var wire  8 S ImmOp [7:0] $end
     $var wire  8 R PC [7:0] $end
     $var wire  1 $ PCsrc $end
     $var wire  8 T branch_PC [7:0] $end
     $var wire  1 X clk $end
     $var wire  8 U inc_PC [7:0] $end
     $var wire  8 V next_PC [7:0] $end
     $var wire  1 Y rst $end
    $upscope $end
    $scope module myRom $end
     $var wire 32 _ ADDRESS_WIDTH [31:0] $end
     $var wire 32 ] DATA_WIDTH [31:0] $end
     $var wire  8 R PC [7:0] $end
     $var wire 32 # instr [31:0] $end
    $upscope $end
   $upscope $end
   $scope module sign_extend $end
    $var wire 32 + ImmOp [31:0] $end
    $var wire  1 ( ImmSrc $end
    $var wire  1 X clk $end
    $var wire 12 W imm [11:0] $end
    $var wire 12 - imm_branch [11:0] $end
    $var wire 12 , imm_imm [11:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
0$
b00000 %
b00000 &
b00000000000000000000000000000000 '
0(
b000 )
0*
b00000000000000000000000000000000 +
b000000000000 ,
b000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b0000000 Q
b00000000 R
b00000000 S
b00000000 T
b00000100 U
b00000100 V
b000000000000 W
0X
0Y
0Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000100000 ]
b00000000000000000000000000000101 ^
b00000000000000000000000000001000 _
#1
b00001111111100000000001100010011 #
b11111 &
1(
b000011111111 ,
b000001110011 -
b0010011 Q
1X
b00001111111100000000001100010011 [
#2
0X
#3
b00000000000000000000010100010011 #
b00000 &
b00000000000000000000000011111111 +
b000000000000 ,
b000000000101 -
b00000100 R
b11111111 S
b00000011 T
b00001000 U
b00001000 V
b000011111111 W
1X
b00000000000000000000010100010011 [
#4
0X
#5
b00000000000000000000010110010011 #
b00000000000000000000000000000000 +
b010000000101 -
b00001000 R
b00000000 S
b00001000 T
b00001100 U
b00001100 V
b000000000000 W
1X
b00000000000000000000010110010011 [
#6
0X
#7
b00000000000001011000010100010011 #
b01011 %
b000000000101 -
b00001100 R
b00001100 T
b00010000 U
b00010000 V
1X
b00000000000001011000010100010011 [
#8
0X
#9
b00000000000101011000010110010011 #
b00001 &
b000000000001 ,
b010000000101 -
b00010000 R
b00010000 T
b00010100 U
b00010100 V
1X
b00000000000101011000010110010011 [
#10
0X
#11
b11111110011001011001110011100011 #
1$
b00110 &
0(
b111 )
b00000000000000000000000000000001 +
b111111100110 ,
b111111111100 -
b00000000000000000000000000000001 0
b1100011 Q
b00010100 R
b00000001 S
b00010101 T
b00011000 U
b00010101 V
b000000000001 W
1X
b11111110011001011001110011100011 [
#12
0X
#13
b00000000000000000000000000000000 #
0$
b00000 %
b00000 &
b11111111111111111111111111111100 +
b000000000000 ,
b000000000000 -
b11111111111111111111111111111100 0
b0000000 Q
b00010101 R
b11111100 S
b00010001 T
b00011001 U
b00011001 V
b111111111100 W
1X
b00000000000000000000000000000000 [
#14
0X
#15
1*
b00000000000000000000000000000000 +
b00000000000000000000000000000000 0
b00011001 R
b00000000 S
b00011001 T
b00011101 U
b00011101 V
b000000000000 W
1X
#16
0X
#17
b00011101 R
b00011101 T
b00100001 U
b00100001 V
1X
#18
0X
#19
b00100001 R
b00100001 T
b00100101 U
b00100101 V
1X
#20
0X
#21
b00100101 R
b00100101 T
b00101001 U
b00101001 V
1X
#22
0X
#23
b00101001 R
b00101001 T
b00101101 U
b00101101 V
1X
#24
0X
#25
b00101101 R
b00101101 T
b00110001 U
b00110001 V
1X
#26
0X
#27
b00110001 R
b00110001 T
b00110101 U
b00110101 V
1X
#28
0X
#29
b00110101 R
b00110101 T
b00111001 U
b00111001 V
1X
#30
0X
#31
b00111001 R
b00111001 T
b00111101 U
b00111101 V
1X
#32
0X
#33
b00111101 R
b00111101 T
b01000001 U
b01000001 V
1X
#34
0X
#35
b01000001 R
b01000001 T
b01000101 U
b01000101 V
1X
